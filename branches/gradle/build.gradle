apply plugin: 'application'


apply from: 'master-build/master-build.gradle'
apply from: 'dependencies.gradle'

//mainClassName = "com.nurflugel.RunMe"
//version = "0.1-SNAPSHOT"  //used to set Ivy version if we're going to publish
//sourceCompatibility = 1.6

mainClassName = "com.nurflugel.ivybrowser.ui.IvyBrowserMainFrame"
//mainClassName = "com.nurflugel.RunMe"



task formatTestResults << {
  ant.xslt(in:  './build/reports/tests/testng-results.xml',
           out: './build/reports/tests/index.html',
           style: 'src/main/resources/testng-results.xsl',
           classpath: '/Users/douglasbullard/Documents/JavaStuff/testng-xslt-1.1.1/lib/saxon-8.7.jar'){
            param(name:'testNgXslt.testDetailsFilter', expression:"FAIL,SKIP,PASS")
            param(name:'testNgXslt.outputDir', expression:'$outputDir')
            param(name:'testNgXslt.sortTestCaseLinks', expression:'true')
  }
}

task transform << {
    def transformer = TransformerFactory.newInstance().newTransformer(in:  './build/reports/tests/testng-results.xml',
                                                                      out: './build/reports/tests/index.html',
                                                                      style: 'src/main/resources/testng-results.xsl'
                                                                      ,classpath: '/Users/douglasbullard/Documents/JavaStuff/testng-xslt-1.1.1/lib/saxon-8.7.jar')
    transformer.setParamter(name:'testNgXslt.testDetailsFilter', expression:"FAIL,SKIP,PASS")
    transformer.setParamter(name:'testNgXslt.outputDir', expression:'$outputDir')
    transformer.setParamter(name:'testNgXslt.sortTestCaseLinks', expression:'true')
    transformer.transform()
}

//def factory = TransformerFactory.newInstance()
//def transformer = factory.newTransformer(new StreamSource(new StringReader(xslt)))
//transformer.transform(new StreamSource(new StringReader(input)), new StreamResult(System.out))

//  style: '/Users/douglasbullard/Documents/JavaStuff/Google_Code/IvyTools/branches/gradle/testng-results.xsl',


//task zipSrc(type: Zip) {
//    appendix = 'src'
//    from sourceSets.main.allSource
//    into('build/dist')
//}


//task(runSimple, dependsOn: 'classes', type: JavaExec) {
//  main = 'com.nurflugel.ivyformatter.ui.IvyFormatterMainFrame'
//  classpath = sourceSets.main.runtimeClasspath
//  args 'DIBBLE'
//  systemProperty 'simple.message', 'Hello '
//}

// Note that we have to tell Gradle what's expected to run before this - Gradle doesn't honor dependency order in the tasks as specified below
task publishWebstart(dependsOn: ['installApp', 'copyResources', 'copyHelp','copyLibs','signJars'], description: 'Create the WebStart distributable.')

// Note that we have to tell Gradle what's expected to run before this - Gradle doesn't honor dependency order in the tasks as specified above
task copyLibs (type: Copy, dependsOn: ['installApp']) {
    from('build/install/IvyTools/lib')
    into('webstart/lib')
}


task copyResources(type: Copy) {
    from('src/app/web')
    into('webstart')
}

task copyHelp(type: Copy) {
    from('src/app/help')
    into('webstart/html')
}

def jarsToSign=[
  'webstart/lib/IvyTools.jar',
  'webstart/lib/asm-3.1.jar',
  'webstart/lib/commons-io-1.4.jar',
  'webstart/lib/commons-lang-2.4.jar',
  'webstart/lib/forms_rt-9.0.0.jar',
  'webstart/lib/glazedlists_java15-1.8.0.jar',
  'webstart/lib/javac2-9.0.0.jar',
  'webstart/lib/jdom-1.0.jar',
  'webstart/lib/jhall-2.0.6.jar',
  'webstart/lib/jtidy-04aug2000r7-dev.jar',
  'webstart/lib/svnkit-1.3.0.jar',
  'webstart/lib/testng-5.8-jdk1.5.jar',
  'webstart/lib/version_tool-1.1.4_fixed.jar',
  'webstart/lib/xstream-1.2.jar'
]

task signJars(dependsOn: ['installApp'])<< {
    println 'Properties are:  keystore is ' + keystore

//    from('src/app/help')
//    into('webstart/html')
  jarsToSign.each {
    println "Generating classes for package: " + it
        ant.signjar(jar: it,
           keypass: keypass,
           keystore: keystore,
           alias: alias,
           storepass: storepass)
  }
}

//task copyThirdPartyLibs(type: Copy) {
//    from('lib')
//    into('webstart/lib')
//    exclude('junit-4.7.jar', 'netty-3.1.5.GA-sources.jar', 'jcsp.jar', 'jcsp-demos-util.jar', 'spock-core*')
//}

//jar.doAfter {
//  ant.mkdirs('webstart/lib')
//}

