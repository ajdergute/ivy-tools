package com.nike.buildmaster.ui;

import com.nike.common.ui.Util;
import com.nike.externalsreporter.ui.tree.TargetNode;

import javax.swing.*;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.List;

/** Confirmation dialog for the build targets */
public class BuildConfirmationDialog extends JDialog
{

    /** Use serialVersionUID for interoperability. */
    private static final long serialVersionUID = -6329557835565050513L;
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JTable buildItemTable;
    private boolean cancelBuild;

    public BuildConfirmationDialog(List<TargetNode> checkedTargets)
    {
        setupUi();
        TableModel tableModel = new BuildConfirmationTableModel(checkedTargets);
        buildItemTable.setModel(tableModel);
        initColumnSizes();
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter()
        {
            public void windowClosing(WindowEvent e)
            {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
//        setSize(800, 500);
        pack();
        Util.center(this);
        setVisible(true);
    }


    /*
     * This method picks good column sizes. If all column heads are wider than the column's cells' contents, then you can just use column.sizeWidthToFit().
     */
    private void initColumnSizes()
    {
        TableModel model = buildItemTable.getModel();

        // Object[] longValues = model.longValues;
        TableCellRenderer headerRenderer = buildItemTable.getTableHeader().getDefaultRenderer();

        for (int col = 0; col < model.getColumnCount(); col++)
        {
            TableColumn column = buildItemTable.getColumnModel().getColumn(col);
            Component comp = headerRenderer.getTableCellRendererComponent(null, column.getHeaderValue(), false, false, 0, 0);
            int headerWidth = comp.getPreferredSize().width;

            for (int row = 0; row < model.getRowCount(); row++)
            {
                comp = buildItemTable.getDefaultRenderer(model.getColumnClass(col))
                        .getTableCellRendererComponent(buildItemTable, model.getValueAt(row, col), false, false, 0, col);

                int cellWidth = comp.getPreferredSize().width;
                column.setPreferredWidth(Math.max(headerWidth, cellWidth));
            }
        }
    }

    private void onOK()
    {
        dispose();
    }

    private void onCancel()
    {
        cancelBuild = true;
        dispose();
    }

    public boolean cancelBuild()
    {
        return cancelBuild;
    }

    public List<TargetNode> getCheckedTargets()
    {
        return ((BuildConfirmationTableModel) buildItemTable.getModel()).getConfirmedItems();
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void setupUi()
    {
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout());
        final JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());
        buttonOK = new JButton();
        buttonOK.setText("OK");
        buttonCancel = new JButton();
        buttonCancel.setText("Stop build");
        JPanel buttonBorderPanel = new JPanel(new BorderLayout());
        final JPanel titledPanel = new JPanel();
        titledPanel.setLayout(new FlowLayout());
        titledPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Confirm build items and tag names"));
        final JScrollPane scrollPane = new JScrollPane();
        buildItemTable = new JTable();


        buttonPanel.add(buttonOK);
        buttonPanel.add(buttonCancel);
        buttonBorderPanel.add(buttonPanel, BorderLayout.EAST);
        contentPane.add(titledPanel, BorderLayout.CENTER);
        contentPane.add(buttonBorderPanel, BorderLayout.SOUTH);
        titledPanel.add(scrollPane);
        scrollPane.setViewportView(buildItemTable);
        scrollPane.setPreferredSize(new Dimension(800, 600));
    }


}
